// Generated by CoffeeScript 1.6.3
(function() {
  var Calendar, showLocations,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  showLocations = {
    "Definiti Space Theater": ["One World, One Sky: Big Bird's Adventure", "Earth, Moon & Sun", "Winter Sky Live!", "Undiscovered Worlds"],
    "Granger Sky Theater": ["Welcome To The Universe", "Cosmic Wonder"],
    "Johnson Star Theater": ["3D Sun", "Space Junk 3D"],
    "Guided Tours": ["Beyond the Dome Guided Tour"]
  };

  $(document).ready(function() {
    var cal, time_shift, update_show_times,
      _this = this;
    cal = new Calendar();
    time_shift = parseInt(window.location.hash.replace("#", "")) || 0;
    setInterval(function() {
      $(".current-date").html(moment().format("dddd, MMMM D, YYYY"));
      return $(".current-time").html(moment().format("hh:mm a"));
    }, 200);
    update_show_times = function() {
      return cal.getShowTimes(function() {
        var show, showList, shows, theater, theaterDiv, time, times, _results;
        shows = cal.showTimesForDay(moment());
        _results = [];
        for (theater in showLocations) {
          showList = showLocations[theater];
          theaterDiv = $("#" + (theater.split(" ")[0].toLowerCase()) + "_shows");
          theaterDiv.html("");
          _results.push((function() {
            var _i, _len, _results1;
            _results1 = [];
            for (_i = 0, _len = showList.length; _i < _len; _i++) {
              show = showList[_i];
              times = ((function() {
                var _j, _len1, _ref, _results2;
                _ref = shows[show] || [];
                _results2 = [];
                for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                  time = _ref[_j];
                  _results2.push("<span 	class=' time " + (time.isAfter(moment().subtract("hours", time_shift)) ? "active" : "") + "' > " + (time.format('h:mm a')) + "</span>");
                }
                return _results2;
              })()).join(", ");
              if (times) {
                _results1.push(theaterDiv.append("<div class='show_container'> <p class='show'>" + show + "</p><p class='times'> " + times + " </p> </div>"));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          })());
        }
        return _results;
      });
    };
    update_show_times();
    return setInterval(update_show_times, 600);
  });

  Calendar = (function() {
    function Calendar() {
      this._compileTemplates = __bind(this._compileTemplates, this);
      this.getFocusDate = __bind(this.getFocusDate, this);
      this.getEventsByWeek = __bind(this.getEventsByWeek, this);
      this.openHours = __bind(this.openHours, this);
      this.isClosed = __bind(this.isClosed, this);
      this.labourDay = __bind(this.labourDay, this);
      this.memorialDay = __bind(this.memorialDay, this);
      this.session = __bind(this.session, this);
      this.dayType = __bind(this.dayType, this);
      this.getOpenHours = __bind(this.getOpenHours, this);
      this.todaysShowTimes = __bind(this.todaysShowTimes, this);
      this.showTimesForDay = __bind(this.showTimesForDay, this);
      this.gotShowTimes = __bind(this.gotShowTimes, this);
      this.getShowTimes = __bind(this.getShowTimes, this);
      this.updateEventsOverview = __bind(this.updateEventsOverview, this);
      this.updatePageTimes = __bind(this.updatePageTimes, this);
      this.render = __bind(this.render, this);
    }

    Calendar.prototype.render = function() {
      var week;
      week = this.getFocusDate().isoWeek();
      return this.el.html(this.cTemplates['week']({
        week: week,
        events: this.eventsByWeek[week] || []
      }));
    };

    Calendar.prototype.updatePageTimes = function() {
      var cafeHours, hours, shopHours, weekdayHours, weekendHours;
      hours = this.getOpenHours();
      weekdayHours = this.openHours().hours[this.session()].weekday;
      weekendHours = this.openHours().hours[this.session()].weekend;
      if (hours !== "closed") {
        shopHours = "" + hours.shopOpen + " - " + hours.shopClose;
        cafeHours = "" + hours.cafeOpen + " - " + hours.cafeClose;
        hours = "" + hours.open + " - " + hours.close;
      } else {
        shopHours = 'closed';
        cafeHours = 'closed';
      }
      weekendHours = "" + weekendHours.open + " - " + weekendHours.close;
      weekdayHours = "" + weekdayHours.open + " - " + weekdayHours.close;
      $(".hours .today span").html(hours);
      $(".hours .weekday span").html(weekdayHours);
      $(".hours .weekend span").html(weekendHours);
      $("#top-bar li.museum span").html(hours);
      $("#top-bar li.cafe span").html(cafeHours);
      return $("#top-bar li.shop span").html(shopHours);
    };

    Calendar.prototype.updateEventsOverview = function() {
      var e, events, html, todaysEvents, tomorrowsEvents;
      events = this.squarespaceEvents.upcoming || [];
      todaysEvents = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = events.length; _i < _len; _i++) {
          e = events[_i];
          if (moment(e.startDate).isSame(moment(), 'day')) {
            _results.push(e);
          }
        }
        return _results;
      })();
      tomorrowsEvents = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = events.length; _i < _len; _i++) {
          e = events[_i];
          if (moment(e.startDate).isSame(moment().add(1, 'day'), 'day')) {
            _results.push(e);
          }
        }
        return _results;
      })();
      if (todaysEvents && todaysEvents.length > 0) {
        html = this.cTemplates['overview']({
          today: todaysEvents,
          tomorrow: tomorrowsEvents
        });
      } else {
        html = 'There are no events scheduled.';
      }
      return $('#events-overview').html(html);
    };

    Calendar.prototype.getShowTimes = function(cb) {
      var _this = this;
      if (cb == null) {
        cb = null;
      }
      return $.ajax({
        dataType: "json",
        url: "" + window.location.protocol + "//adlersiteserver.herokuapp.com/show_times?callback=?",
        timeout: 10000,
        success: function(times) {
          _this.showTimes = times;
          _this.gotShowTimes();
          if (cb != null) {
            return cb();
          }
        },
        error: function() {
          _this.showTimes = [];
          _this.gotShowTimes();
          if (cb != null) {
            return cb();
          }
        }
      });
    };

    Calendar.prototype.gotShowTimes = function() {
      var show, time, times, _ref, _results;
      console.log("show times new ", this.showTimes);
      _ref = this.showTimes;
      _results = [];
      for (show in _ref) {
        times = _ref[show];
        times = (function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = times.length; _i < _len; _i++) {
            time = times[_i];
            if (time.Available > 0) {
              _results1.push(time.StartDateTime);
            }
          }
          return _results1;
        })();
        if (show === "Space Junk 3D") {
          times = (function() {
            var _i, _len, _results1;
            _results1 = [];
            for (_i = 0, _len = times.length; _i < _len; _i++) {
              time = times[_i];
              if (time !== "Nov 4 2013 10:30:00:000AM") {
                _results1.push(time);
              }
            }
            return _results1;
          })();
        }
        _results.push(this.showTimes[show] = (function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = times.length; _i < _len; _i++) {
            time = times[_i];
            _results1.push(moment(time, "MMM DD YYYY HH:mm:ss:SSSA").local());
          }
          return _results1;
        })());
      }
      return _results;
    };

    Calendar.prototype.showTimesForDay = function(day) {
      var dayTimes, show, time, times, _ref;
      dayTimes = {};
      console.log("show times in cal are", this.showTimes);
      _ref = this.showTimes;
      for (show in _ref) {
        times = _ref[show];
        dayTimes[show] = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = times.length; _i < _len; _i++) {
            time = times[_i];
            if (time.isSame(day, 'day')) {
              _results.push(time);
            }
          }
          return _results;
        })();
      }
      return dayTimes;
    };

    Calendar.prototype.todaysShowTimes = function() {
      return this.todaysTimes = this.showTimesForDay(moment());
    };

    Calendar.prototype.getOpenHours = function() {
      var dayType, hours, result, session;
      if (this.isClosed()) {
        return result = 'closed';
      } else {
        hours = this.openHours().hours;
        session = this.session();
        dayType = this.dayType();
        return hours[session][dayType];
      }
    };

    Calendar.prototype.dayType = function() {
      if (moment().day() === 0 || moment().day() === 6) {
        return 'weekend';
      } else {
        return 'weekday';
      }
    };

    Calendar.prototype.session = function() {
      if (moment().isAfter(this.memorialDay()) && moment().isBefore(this.labourDay())) {
        return "late";
      } else {
        return "normal";
      }
    };

    Calendar.prototype.memorialDay = function(year) {
      var lastMonday, may;
      if (year == null) {
        year = null;
      }
      year || (year = moment().year());
      may = moment("" + year + " 5 31");
      if (may.day() === 1) {
        lastMonday = june;
      } else if (may.day() === 0) {
        lastMonday = may.subtract(6, "days");
      } else {
        lastMonday = may.subtract(may.day() - 1, 'days');
      }
      return lastMonday;
    };

    Calendar.prototype.labourDay = function(year) {
      var firstMonday, september;
      if (year == null) {
        year = null;
      }
      year || (year = moment().year());
      september = moment("" + year + " 9 1");
      if (september.day() === 1) {
        firstMonday = september;
      } else if (september.day() === 0) {
        firstMonday = september.add(1, "day");
      } else {
        firstMonday = september.add(8 - september.day(), 'days');
      }
      return firstMonday;
    };

    Calendar.prototype.isClosed = function() {
      var closedDay, today, _i, _len, _ref;
      today = moment();
      _ref = this.openHours().closed;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        closedDay = _ref[_i];
        if (today.date() === moment(closedDay).date() && today.month() === moment(closedDay).month()) {
          return true;
        }
      }
      return false;
    };

    Calendar.prototype.openHours = function() {
      return {
        hours: {
          late: {
            weekday: {
              open: "9:30 am",
              close: "6 pm",
              cafeOpen: "10 am",
              cafeClose: "3 pm",
              shopOpen: "9:30 am",
              shopClose: "6 pm"
            },
            weekend: {
              open: "9:30 am",
              close: "6 pm",
              cafeOpen: "10 am",
              cafeClose: "3:30 pm",
              shopOpen: "9:30 am",
              shopClose: "6 pm"
            }
          },
          normal: {
            weekday: {
              open: "9:30 am",
              close: "6 pm",
              cafeOpen: "10 am",
              cafeClose: "3 pm",
              shopOpen: "9:30 am",
              shopClose: "6 pm"
            },
            weekend: {
              open: "9:30 am",
              close: "6 pm",
              cafeOpen: "10 am",
              cafeClose: "3:30 pm",
              shopOpen: "9:30 am",
              shopClose: "6 pm"
            }
          }
        },
        closed: ["25th December", "28 November"]
      };
    };

    Calendar.prototype.getEventsByWeek = function(events, cb) {
      var day, e, week, _i, _len;
      this.eventsByWeek = {};
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        e = events[_i];
        if (e.startDate != null) {
          week = moment(e.startDate).isoWeek();
          day = moment(e.startDate).day();
          if (this.eventsByWeek[week] == null) {
            this.eventsByWeek[week] = {};
          }
          if (this.eventsByWeek[week][day] == null) {
            this.eventsByWeek[week][day] = [];
          }
          this.eventsByWeek[week][day].push(e);
        }
      }
      if (cb != null) {
        return cb();
      }
    };

    Calendar.prototype.getFocusDate = function() {
      return this.focusDate || (this.focusDate = moment());
    };

    Calendar.prototype._compileTemplates = function() {
      var templateName, text, _ref, _results;
      this.cTemplates = {};
      _ref = this.templates;
      _results = [];
      for (templateName in _ref) {
        text = _ref[templateName];
        _results.push(this.cTemplates[templateName] = _.template(text));
      }
      return _results;
    };

    return Calendar;

  })();

  window.Calendar = Calendar;

}).call(this);
